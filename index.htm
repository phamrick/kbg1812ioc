<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/konva@4.2.2/konva.min.js"></script>
	<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
    <meta charset="utf-8" />
    <title>1812 Invasion of Canada</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #f0f0f0;
      }
    </style>
  </head>
  <body>
    <div id="container"></div>
    <script>

	  var jsonConfig;
	  var objectId = 0;
	  var socket = io();
	  var piecesLayer;
	  
	  var actualWidth = 1920;
	  var actualHeight = 1080;
	  
	  var xscale = window.innerWidth / actualWidth;
	  var yscale = window.innerHeight / actualHeight;
	
	  function loadJSON(callback) {   
	    var xobj = new XMLHttpRequest();
	    xobj.overrideMimeType("application/json");
	    xobj.open('GET', 'load_images_at_start', true);
	    xobj.onreadystatechange = function () {
		  if (xobj.readyState == 4 && xobj.status == "200") {
		    callback(JSON.parse(xobj.responseText));
		  }
	    };
	    xobj.send(null);  
      }
	  
	  var images = {};
	  
	  function fUpdateKnodePos(iNodeID, iX, iY) {
		
		var oNode = piecesLayer.getChildren(function(node){
		   return node.id() === iNodeID;
		}).toArray()[0];
		
		oNode.x(iX);
		oNode.y(iY);
		piecesLayer.draw();
	  }
	  
      socket.on('dragKnode', function(data){
	  
		var nodeID = data.nodeID;
		var x = data.x;
		var y = data.y;
		
	    fUpdateKnodePos(nodeID, x, y);
      });
	  
	  
      var func_dragStart = function(e) {
		
        var draggedObj = e.target;
        draggedObj.moveToTop();
        draggedObj.getLayer().draw();
      };
		
      var func_nodeTopMostAndSelected = function(e) {
					
        var oNode = e.target;
        oNode.moveToTop();
        oNode.getLayer().draw();
        //selectedNode = oNode;
      };
	  
	  function fnInstantiateImg(iImgKey, iLayer, iX, iY, iDraggable)
	  {
		objectId++;
	  
        var oKimg = new Konva.Image({
            image: images[iImgKey],
            x: parseInt(iX),
            y: parseInt(iY),
			id: objectId.toString(),
			draggable: iDraggable
        });
			
        iLayer.add(oKimg);
        iLayer.draw();
		
		if (iDraggable)
		{
          oKimg.on('click', func_nodeTopMostAndSelected);
          oKimg.on('dragstart', func_dragStart);
		  
          oKimg.on('dragmove', function(e) {
            var oNode = e.target;
            socket.emit('dragKnode', { nodeID: oNode.id(),
                                       x: oNode.x(),
                                       y: oNode.y()}
            );
          });
		}
		
		return;
	  }
	  
	  function fnInitStage()
	  {

        var stage = new Konva.Stage({
          container: 'container',
          width: window.innerWidth,
          height: window.innerHeight
        });
		
		//var bgLayer = new Konva.Layer();
        var mapLayer = new Konva.Layer();
		piecesLayer = new Konva.Layer();
		
		//mapLayer.scale({ x: xscale, y: yscale });
		//piecesLayer.scale({ x: xscale, y: yscale });
		
		//mapLayer.scalex(xscale);
		//mapLayer.scaley(yscale);
		//piecesLayer.scalex(xscale);
		//piecesLayer.scaley(yscale);

		fnInstantiateImg('map_1920', mapLayer, 0, 0, false);
		
		for(var cubesKey in jsonConfig.cubes)
		{
		  var cubesVal = jsonConfig.cubes[cubesKey];
		  var srcKey = cubesVal.srcKey;
		  var insts = cubesVal.instances;
		  
          var index = 0; 
          while (index < insts.length) { 
            var inst = insts[index];
			fnInstantiateImg(srcKey, piecesLayer, inst.x, inst.y, true);
            index++; 
          }
		}

		//stage.add(bgLayer);
        stage.add(mapLayer);
		stage.add(piecesLayer);
		
		stage.scale({ x: xscale, y: xscale });
		
		//var context = bgLayer.getContext();
        //context.setAttr('font', '20pt Calibri');
        //context.setAttr('textAlign', 'center');
        //context.setAttr('fillStyle', 'white');
		
		mapLayer.draw();
		piecesLayer.draw();
	  }
	
      function loadImages(json) {
	    
		jsonConfig = json;
        var loadedImages = 0;
        var numImages = 0;
		var imgSources = jsonConfig.imageSources
        for (var src in imgSources) {
          numImages++;
        }
        for (var src in imgSources) {
          images[src] = new Image();
          images[src].onload = function() {
            if (++loadedImages >= numImages) {
              fnInitStage();
            }
          };
          //images[src].src = assetDir + sources[src];
		  images[src].src = imgSources[src];
        }
      }
	  
      loadJSON(loadImages);
	
    </script>
  </body>
</html>

